import requests
import time

# -------- Configuration --------
DOIS = [
    "10.1002/1520-6378%282001%2926%3A1%2B%3C%3A%3AAID-COL47%3E3.0.CO%3B2-4",
    "10.1002/1520-6378(2001)26:1",
    "10.1002/1521-396X(200111)188:1",
    "10.1002/adfm.202301425",
    "10.1002/adma.201404636",
    "10.1002/adma.201404636/abstract",
    "10.1002/adma.202204460",
    "10.1002/adma.202302283",
    "10.1002/aenm.202002676",
    "10.1002/ecj.10394",
    "10.1002/lpor.201600147",
    "10.1002/sdtp.10406",
    "10.1007/s10845-020-01563-4",
    "10.1007/s10854-019-02393-8",
    "10.1007/s11517-007-0263-1",
    "10.1007/s11627-018-9939-5",
    "10.1016/0006-291x(75)90482-9",
    "10.1016/0006-291x(75)90498-2",
    "10.1016/0006-291x(75)90506-9",
    "10.1016/0006-291x(75)90508-2",
    "10.1016/0006-2944(75)90147-7",
    "10.1016/0921-4526(93)90277-D",
    "10.1016/j.biortech.2015.12.057",
    "10.1016/j.jfoodeng.2014.08.015",
    "10.1016/j.joule.2020.12.008",
    "10.1016/j.jqsrt.2013.12.004",
    "10.1016/j.opelre.2017.06.009",
    "10.1016/j.protcy.2014.11.005",
    "10.1016/j.synthmet.2009.05.023",
    "10.1017/S0957423907000355",
    "10.1017/cbo9781107278929",
    "10.1021/acs.nanolett.5b00392",
    "10.1021/es101052q",
    "10.1021/jacs.1c02148",
    "10.1021/nl3003254",
    "10.1038/347539a0",
    "10.1038/357477a0",
    "10.1038/370354a0",
    "10.1038/420752a",
    "10.1038/d41586-018-06923-y",
    "10.1038/nature04760",
    "10.1038/nature13829",
    "10.1038/nmat1134",
    "10.1038/nnano.2014.26",
    "10.1038/nphoton.2006.78",
    "10.1038/nphoton.2007.34",
    "10.1038/nphoton.2009.92",
    "10.1038/nphoton.2011.171",
    "10.1038/s41467-020-14747-6",
    "10.1038/s41467-021-22529-x",
    "10.1038/s41586-018-0575-3",
    "10.1038/s41586-018-0576-2",
    "10.1038/s41586-019-1771-5",
    "10.1038/s41598-019-47847-5",
    "10.1039/C9NR01422E",
    "10.1039/D1TA00093D",
    "10.1039/b800028j",
    "10.1039/b905256a",
    "10.1051/jcp/1936330587",
    "10.1063/1.111832",
    "10.1063/1.120807",
    "10.1063/1.121090",
    "10.1063/1.1479455",
    "10.1063/1.1753706",
    "10.1063/1.1753837",
    "10.1063/1.3559842",
    "10.1063/1.4739235",
    "10.1063/1.88831",
    "10.1080/14786441108564683",
    "10.1093/jxb/48.7.1407",
    "10.1103/PhysRev.83.603",
    "10.1103/PhysRev.89.20",
    "10.1103/PhysRev.99.1892",
    "10.1109/6.343989",
    "10.1109/CVPR.2008.4587766",
    "10.1109/IAS.2004.1348695",
    "10.1109/ICSICT.2006.306525",
    "10.1109/IEDM.2013.6724622",
    "10.1109/IEMBS.2007.4352784",
    "10.1109/JDT.2005.852510",
    "10.1109/JPROC.2013.2274914",
    "10.1109/JSTQE.2004.824077",
    "10.1109/LPT.2015.2451006",
    "10.1109/NUSOD.2009.5297218",
    "10.1117/12.565757",
    "10.1117/12.614681",
    "10.1117/12.687944",
    "10.1117/12.687944?SSO=1",
    "10.1117/12.799843",
    "10.1117/12.799843.short",
    "10.1126/science.1060258",
    "10.1126/science.1108712",
    "10.1126/science.1113090",
    "10.1126/science.1144216",
    "10.1126/science.1175690",
    "10.1126/science.aah4345",
    "10.1134/S1063782606050162",
    "10.1142/9789814287876_0007",
    "10.1143/JJAP.28.L2112",
    "10.1143/JJAP.36.5393",
    "10.1149/2.0142001JSS",
    "10.1149/2.0251801jss",
    "10.1201/b19498-56",
    "10.1214/ss/1009212817",
    "10.1364/OE.15.003607",
    "10.1364/OE.16.001808",
    "10.1364/OE.16.012632",
    "10.1364/oe.16.001808",
    "10.1371/journal.pone.0067798",
    "10.17586/2220-8054-2015-6-1-6-45",
    "10.1890/14-0468.1",
    "10.24084/repqj11.399",
    "10.24425/jppr.2024.150247",
    "10.26616/NIOSHPUB2011192",
    "10.3390/su11247125",
    "10.4209/aaqr.2017.10.0371",
    "10.5114/bta.2020.92930",
    "10.5586/aa.762"
]


CROSSREF_API = "https://api.crossref.org/works/"
HEADERS = {
    "User-Agent": "MyArticleAuthorExtractor/1.0 (mailto:your.email@example.com)"  # Replace with your email
}
DELAY_BETWEEN_REQUESTS = 0  # seconds

# -------- Logic --------
def get_authors(doi):
    """Fetch authors from Crossref API for a single DOI."""
    try:
        response = requests.get(CROSSREF_API + doi, headers=HEADERS, timeout=10)
        response.raise_for_status()
        authors_data = response.json().get("message", {}).get("author", [])
        authors = [f"{a.get('given', '')} {a.get('family', '')}".strip() for a in authors_data]
        return authors
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching DOI {doi}: {e}")
        return []

def main():
    print(f"üìö Fetching authors for {len(DOIS)} articles...\n")
    start_time = time.time()

    for idx, doi in enumerate(DOIS, 1):
        print(f"[{idx}] DOI: {doi}")
        authors = get_authors(doi)
        if authors:
            for author in authors:
                print(f"    - {author}")
        else:
            print("    ‚ö†Ô∏è  No authors found or request failed.")
        time.sleep(DELAY_BETWEEN_REQUESTS)

    end_time = time.time()
    total_time = end_time - start_time
    print(f"\n‚úÖ Done in {total_time:.2f} seconds.")

# -------- Entry Point --------
if __name__ == "__main__":
    main()
